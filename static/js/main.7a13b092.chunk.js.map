{"version":3,"sources":["Input/Input.module.css","serviceWorker.ts","redux/counter-reducer.ts","redux/redux-store.ts","ControlPanel/ControlPanel.tsx","Input/Input.tsx","setCounter/Setting.tsx","App.tsx","index.tsx","ControlPanel/ControlPanel.module.css","setCounter/Setting.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","startValue","endValue","counter","error","counterReducer","state","action","type","value","rootReducer","combineReducers","store","createStore","ControlPanel","useSelector","dispatch","useDispatch","iteration","useCallback","reset","history","useHistory","className","s","panel","display","counterFinish","next","disabled","nextButton","nextButtonDis","onClick","resetButtonDis","resetButton","set","push","Input","props","main","title","input","min","onChange","e","onChangeValue","currentTarget","Setting","setCounter","setCounterAC","onChangeStartValue","onChangeStartValueAC","onChangeEndValue","onChangeEndValueAC","errorHandler","useEffect","settingPanel","setButtonDis","setButton","App","exact","path","render","to","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,MAAQ,uB,gKCW9DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iCC4BFC,EAAe,CACfC,WAAY,EACZC,SAAU,EACVC,QAAS,EACTC,MAAO,IAmEIC,EAhEQ,WAAiG,IAAhGC,EAA+F,uDAArEN,EAAcO,EAAuD,uCACnH,OAAQA,EAAOC,MACX,IAvDU,YAwDN,OAAIF,EAAML,WAAaK,EAAMJ,SAClB,eAAII,EAAX,CAAkBH,QAASG,EAAMH,QAAU,IAExCG,EACX,IA3DM,QA4DF,OAAO,eAAIA,EAAX,CAAkBH,QAASG,EAAML,aACrC,IA5DmB,qBA6Df,OAAO,eAAIK,EAAX,CAAkBL,WAAYM,EAAOE,QACzC,IA7DiB,mBA8Db,OAAO,eAAIH,EAAX,CAAkBJ,SAAUK,EAAOE,QACvC,IA9Da,eA+DT,OAAIH,EAAML,WAAaK,EAAMJ,SAClB,eAAII,EAAX,CAAkBF,MAAO,oHAE1BE,EAAML,aAAeK,EAAMJ,SACnB,eAAII,EAAX,CAAkBF,MAAO,0HAGtB,eAAIE,EAAX,CAAkBF,MAAO,KAC7B,IAtEW,aAuEP,OAAO,eAAIE,EAAX,CAAkBH,QAASI,EAAOE,QACtC,QACI,OAAOH,IC3EfI,EAAcC,YAAgB,CAC9BR,QAASE,IAIAO,EAAQC,YAAYH,G,+BCApBI,EAAyB,WAElC,IAAMX,EAAUY,aAAsC,SAAAT,GAAK,OAAIA,EAAMH,QAAQA,WACvED,EAAWa,aAAsC,SAAAT,GAAK,OAAIA,EAAMH,QAAQD,YACxED,EAAac,aAAsC,SAAAT,GAAK,OAAIA,EAAMH,QAAQF,cAE1Ee,EAAWC,cACXC,EAAYC,uBAAY,WAC1BH,EFoEG,CACHR,KArFU,gBEiBX,CAACQ,IACEI,EAAQD,uBAAY,WACtBH,EFsEG,CACHR,KAzFM,YEmBP,CAACQ,IAEEK,EAAUC,cAKhB,OACI,yBAAKC,UAAWC,IAAEC,OACd,yBAAKF,UAAWC,IAAEE,SACbvB,EAAUD,GAAY,yBAAKqB,UAAWC,IAAErB,SAAUA,GAClDA,IAAYD,GAAY,yBAAKqB,UAAWC,IAAEG,eAAgBxB,IAE/D,yBAAKoB,UAAWC,IAAEI,MACd,4BACIC,SAAU1B,IAAYD,EAClBqB,UAAWpB,EAAUD,EAAUsB,IAAEM,WAAaN,IAAEO,cACpDC,QAASd,GAHb,SAKJ,yBAAKK,UAAWC,IAAEJ,OACV,4BACIS,SAAU1B,IAAYF,EACtBsB,UAAWpB,IAAYF,EAAYuB,IAAES,eAAiBT,IAAEU,YACxDF,QAASZ,GAHb,UAKR,yBAAKG,UAAWC,IAAEW,KACd,4BAAQH,QAvBK,WACrBX,EAAQe,KAAK,cAsBL,U,iCCpCHC,EAA6B,SAACC,GAKvC,OACI,oCACI,2BAAOf,UAAWC,IAAEe,MAChB,0BAAMhB,UAAWC,IAAEgB,OAAQF,EAAME,OACjC,2BAAOjB,UAAWC,IAAEiB,MAAOjC,KAAK,SAASkC,IAAI,IAAIjC,MAAO6B,EAAM7B,MAAOkC,SAPzD,SAACC,GACrBN,EAAMO,eAAeD,EAAEE,cAAcrC,aCHhCsC,EAAoB,WAE7B,IAAM7C,EAAWa,aAAsC,SAAAT,GAAK,OAAIA,EAAMH,QAAQD,YACxED,EAAac,aAAsC,SAAAT,GAAK,OAAIA,EAAMH,QAAQF,cAC1EG,EAAQW,aAAsC,SAAAT,GAAK,OAAIA,EAAMH,QAAQC,SAErEY,EAAWC,cACX+B,EAAa7B,uBAAY,SAACV,GAC5BO,EJ4FoB,SAACP,GACzB,MAAO,CACHD,KA3GW,aA4GXC,SI/FSwC,CAAaxC,MACvB,CAACO,IACEkC,EAAqB/B,uBAAY,SAACV,GACpCO,EJwE4B,SAACP,GACjC,MAAO,CACHD,KA7FmB,qBA8FnBC,SI3ES0C,CAAqB1C,MAC/B,CAACO,IACEoC,EAAmBjC,uBAAY,SAACV,GAClCO,EJ2E0B,SAACP,GAC/B,MAAO,CACHD,KAlGiB,mBAmGjBC,SI9ES4C,CAAmB5C,MAC7B,CAACO,IACEsC,EAAenC,uBAAY,WAC7BH,EJ+EG,CACHR,KAvGa,mBIwBd,CAACQ,IAEJuC,qBAAU,WACND,MACD,CAACpD,EAAUD,EAAYqD,IAE1B,IAAIjC,EAAUC,cAMd,OACI,yBAAKC,UAAWC,IAAEgC,cACd,6BACe,KAAVpD,GAAgB,yBAAKmB,UAAWC,IAAEpB,OAAQA,GAC3C,kBAAC,EAAD,CAAOoC,MAAO,cAAe/B,MAAOR,EAAY4C,cAAeK,IAC/D,kBAAC,EAAD,CAAOV,MAAO,YAAa/B,MAAOP,EAAU2C,cAAeO,KAE/D,yBAAK7B,UAAWC,IAAEW,KACd,4BAAQZ,UAAqB,KAAVnB,EAAeoB,IAAEiC,aAAejC,IAAEkC,UAC7C7B,SAAoB,KAAVzB,EACV4B,QAfS,WACzBgB,EAAW/C,GACXoB,EAAQe,KAAK,mBAWL,UCtBDuB,MAjBf,WAEI,IAAM1D,EAAac,aAAsC,SAAAT,GAAK,OAAIA,EAAMH,QAAQF,cAC1EC,EAAWa,aAAsC,SAAAT,GAAK,OAAIA,EAAMH,QAAQD,YAE9E,OACI,yBAAKqB,UAAW,OACZ,uFAAgBtB,EAAhB,iBAAgCC,GAChC,yBAAKqB,UAAW,WACZ,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,qBACjD,kBAAC,IAAD,CAAOF,KAAK,gBAAgBC,OAAQ,kBAAM,kBAAC,EAAD,SAC1C,kBAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,kBAAC,EAAD,YCXrDE,IAASF,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUlD,MAAOA,GACb,kBAAC,EAAD,QAEUqD,SAASC,eAAe,SP6HxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArE,GACLsE,QAAQtE,MAAMA,EAAMuE,a,kBQhJ5BlF,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,QAAU,8BAA8B,QAAU,8BAA8B,cAAgB,oCAAoC,KAAO,2BAA2B,WAAa,iCAAiC,cAAgB,oCAAoC,MAAQ,4BAA4B,YAAc,kCAAkC,eAAiB,qCAAqC,IAAM,4B,kBCA9cD,EAAOC,QAAU,CAAC,aAAe,8BAA8B,IAAM,qBAAqB,UAAY,2BAA2B,aAAe,8BAA8B,MAAQ,0B","file":"static/js/main.7a13b092.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Input_main__Vv4-a\",\"input\":\"Input_input__3zL1g\",\"title\":\"Input_title__3-106\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const ITERATION = 'ITERATION';\r\nconst RESET = 'RESET';\r\nconst ONCHANGESTARTVALUE = 'ONCHANGESTARTVALUE';\r\nconst ONCHANGEENDVALUE = 'ONCHANGEENDVALUE';\r\nconst ERRORHANDLER = 'ERRORHANDLER';\r\nconst SETCOUNTER = 'SETCOUNTER';\r\n\r\ntype IterationActionType = {\r\n    type: typeof ITERATION\r\n}\r\ntype ResetActionType = {\r\n    type: typeof RESET\r\n}\r\ntype OnChangeStartValueActionType = {\r\n    type: typeof ONCHANGESTARTVALUE\r\n    value: number\r\n}\r\ntype OnChangeEndValueActionType = {\r\n    type: typeof ONCHANGEENDVALUE\r\n    value: number\r\n}\r\ntype ErrorHandlerActionType = {\r\n    type: typeof ERRORHANDLER\r\n}\r\ntype setCounterActionType = {\r\n    type: typeof SETCOUNTER\r\n    value: number\r\n}\r\n\r\ntype CounterReducerActionType =\r\n    ReturnType<typeof iterationAC>\r\n    | ReturnType<typeof resetAC>\r\n    | ReturnType<typeof onChangeStartValueAC>\r\n    | ReturnType<typeof onChangeEndValueAC>\r\n    | ReturnType<typeof errorHandlerAC>\r\n    | ReturnType<typeof setCounterAC>\r\n\r\n\r\ntype InitialStateType = {\r\n    startValue: number\r\n    endValue: number\r\n    counter: number\r\n    error: string\r\n}\r\n\r\n\r\nlet initialState = {\r\n    startValue: 0,\r\n    endValue: 5,\r\n    counter: 0,\r\n    error: \"\"\r\n}\r\n\r\nconst counterReducer = (state: InitialStateType = initialState, action: CounterReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ITERATION:\r\n            if (state.startValue < state.endValue) {\r\n                return {...state, counter: state.counter + 1}\r\n            }\r\n            return state;\r\n        case RESET:\r\n            return {...state, counter: state.startValue}\r\n        case ONCHANGESTARTVALUE:\r\n            return {...state, startValue: action.value}\r\n        case ONCHANGEENDVALUE:\r\n            return {...state, endValue: action.value}\r\n        case ERRORHANDLER:\r\n            if (state.startValue > state.endValue) {\r\n                return {...state, error: \"start, не должен быть выше max!\"}\r\n            }\r\n            if(state.startValue === state.endValue) {\r\n                return {...state, error: \"Start, не должен быть равен max!\"}\r\n            }\r\n\r\n            return {...state, error: \"\"};\r\n        case SETCOUNTER:\r\n            return {...state, counter: action.value}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const iterationAC = (): IterationActionType => {\r\n    return {\r\n        type: ITERATION\r\n    }\r\n}\r\nexport const resetAC = (): ResetActionType => {\r\n    return {\r\n        type: RESET\r\n    }\r\n}\r\nexport const onChangeStartValueAC = (value: number): OnChangeStartValueActionType => {\r\n    return {\r\n        type: ONCHANGESTARTVALUE,\r\n        value\r\n    }\r\n}\r\nexport const onChangeEndValueAC = (value: number): OnChangeEndValueActionType => {\r\n    return {\r\n        type: ONCHANGEENDVALUE,\r\n        value\r\n    }\r\n}\r\nexport const errorHandlerAC = (): ErrorHandlerActionType => {\r\n    return {\r\n        type: ERRORHANDLER\r\n    }\r\n}\r\nexport const setCounterAC = (value: number): setCounterActionType => {\r\n    return {\r\n        type: SETCOUNTER,\r\n        value\r\n    }\r\n}\r\n\r\nexport default counterReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport counterReducer from \"./counter-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer);","import React, {useCallback} from \"react\";\r\nimport s from './ControlPanel.module.css';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {iterationAC, resetAC} from \"../redux/counter-reducer\";\r\n\r\n\r\nexport const ControlPanel: React.FC = () => {\r\n\r\n    const counter = useSelector<AppRootStateType, number>(state => state.counter.counter);\r\n    const endValue = useSelector<AppRootStateType, number>(state => state.counter.endValue);\r\n    const startValue = useSelector<AppRootStateType, number>(state => state.counter.startValue);\r\n\r\n    const dispatch = useDispatch();\r\n    const iteration = useCallback(() => {\r\n        dispatch(iterationAC());\r\n    }, [dispatch]);\r\n    const reset = useCallback(() => {\r\n        dispatch(resetAC());\r\n    }, [dispatch])\r\n\r\n    const history = useHistory();\r\n    const redirectSettings = () => {\r\n        history.push('/setting')\r\n    }\r\n\r\n    return (\r\n        <div className={s.panel}>\r\n            <div className={s.display}>\r\n                {counter < endValue && <div className={s.counter}>{counter}</div>}\r\n                {counter === endValue && <div className={s.counterFinish}>{counter}</div>}\r\n            </div>\r\n            <div className={s.next}>\r\n                <button\r\n                    disabled={counter === endValue}\r\n                        className={counter < endValue? s.nextButton : s.nextButtonDis}\r\n                    onClick={iteration}>next</button>\r\n            </div>\r\n            <div className={s.reset}>\r\n                    <button\r\n                        disabled={counter === startValue}\r\n                        className={counter === startValue? s.resetButtonDis : s.resetButton}\r\n                        onClick={reset}>reset</button>\r\n            </div>\r\n            <div className={s.set}>\r\n                <button onClick={redirectSettings}>Set</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './Input.module.css'\r\n\r\ntype PropsType = {\r\n    title: string\r\n    value: number\r\n    onChangeValue: (value: number) => void\r\n}\r\n\r\n\r\nexport const Input: React.FC<PropsType> = (props) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeValue(+e.currentTarget.value);\r\n    }\r\n    return (\r\n        <>\r\n            <label className={s.main}>\r\n                <span className={s.title}>{props.title}</span>\r\n                <input className={s.input} type=\"number\" min=\"0\" value={props.value} onChange={onChangeHandler}/>\r\n            </label>\r\n        </>\r\n    )\r\n}","import React, {useCallback, useEffect} from \"react\";\r\nimport s from './Setting.module.css'\r\nimport {Input} from \"../Input/Input\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {errorHandlerAC, onChangeEndValueAC, onChangeStartValueAC, setCounterAC} from \"../redux/counter-reducer\";\r\n\r\n\r\n\r\nexport const Setting: React.FC = () => {\r\n\r\n    const endValue = useSelector<AppRootStateType, number>(state => state.counter.endValue);\r\n    const startValue = useSelector<AppRootStateType, number>(state => state.counter.startValue);\r\n    const error = useSelector<AppRootStateType, string>(state => state.counter.error);\r\n\r\n    const dispatch = useDispatch();\r\n    const setCounter = useCallback((value: number) => {\r\n        dispatch(setCounterAC(value));\r\n    }, [dispatch]);\r\n    const onChangeStartValue = useCallback((value: number) => {\r\n        dispatch(onChangeStartValueAC(value));\r\n    }, [dispatch]);\r\n    const onChangeEndValue = useCallback((value: number) => {\r\n        dispatch(onChangeEndValueAC(value));\r\n    }, [dispatch]);\r\n    const errorHandler = useCallback(() => {\r\n        dispatch(errorHandlerAC());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        errorHandler();\r\n    }, [endValue, startValue, errorHandler])\r\n\r\n    let history = useHistory();\r\n    const redirectControlPanel = () => {\r\n        setCounter(startValue);\r\n        history.push('/controlPanel');\r\n    }\r\n\r\n    return (\r\n        <div className={s.settingPanel}>\r\n            <div>\r\n                {error !== \"\" && <div className={s.error}>{error}</div>}\r\n                <Input title={\"Start Value\"} value={startValue} onChangeValue={onChangeStartValue}/>\r\n                <Input title={\"Max Value\"} value={endValue} onChangeValue={onChangeEndValue}/>\r\n            </div>\r\n            <div className={s.set}>\r\n                <button className={error !== \"\" ? s.setButtonDis : s.setButton}\r\n                        disabled={error !== \"\"}\r\n                        onClick={redirectControlPanel}>Set</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./redux/redux-store\";\r\nimport {ControlPanel} from \"./ControlPanel/ControlPanel\";\r\nimport {Setting} from \"./setCounter/Setting\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const startValue = useSelector<AppRootStateType, number>(state => state.counter.startValue);\r\n    const endValue = useSelector<AppRootStateType, number>(state => state.counter.endValue);\r\n\r\n    return (\r\n        <div className={\"app\"}>\r\n            <h1>Счетчик от {startValue} до {endValue}</h1>\r\n            <div className={\"counter\"}>\r\n                <Route exact path=\"/\" render={() => <Redirect to=\"/controlPanel\"/>}/>\r\n                <Route path=\"/controlPanel\" render={() => <ControlPanel />}/>\r\n                <Route path='/setting' render={() => <Setting/>}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/redux-store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"ControlPanel_panel__1_gGm\",\"display\":\"ControlPanel_display__3HuY9\",\"counter\":\"ControlPanel_counter__35s0_\",\"counterFinish\":\"ControlPanel_counterFinish__3nQ2_\",\"next\":\"ControlPanel_next__EMuuU\",\"nextButton\":\"ControlPanel_nextButton__2o7Ib\",\"nextButtonDis\":\"ControlPanel_nextButtonDis__1ArjX\",\"reset\":\"ControlPanel_reset__2TV9w\",\"resetButton\":\"ControlPanel_resetButton__1cl2u\",\"resetButtonDis\":\"ControlPanel_resetButtonDis__2B64g\",\"set\":\"ControlPanel_set__2JE1_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingPanel\":\"Setting_settingPanel__FHw7R\",\"set\":\"Setting_set__3sXq3\",\"setButton\":\"Setting_setButton__2j2VP\",\"setButtonDis\":\"Setting_setButtonDis__1vYNG\",\"error\":\"Setting_error__2nzL_\"};"],"sourceRoot":""}